/*
 * scheduler.c
 *
 *  Created on: Dec 2, 2024
 *      Author: ADMIN PC
 */

#include "scheduler.h"


sTask SCH_tasks_G[SCH_MAX_TASKS];

void SCH_Init(void) {
    for (uint8_t i = 0; i < SCH_MAX_TASKS; i++) {
        SCH_tasks_G[i].pTask = NULL;
        SCH_tasks_G[i].Delay = 0;
        SCH_tasks_G[i].Period = 0;
        SCH_tasks_G[i].RunMe = 0;
    }
}

// Hàm cập nhật trạng thái nhiệm vụ
void SCH_Update(void) {
    for (uint8_t idx = 0; idx < SCH_MAX_TASKS; idx++) {
        if (SCH_tasks_G[idx].pTask) { // Nếu nhiệm vụ tồn tại
            if (SCH_tasks_G[idx].Delay == 0) {
                SCH_tasks_G[idx].RunMe++; // Đánh dấu nhiệm vụ đã sẵn sàng
                if (SCH_tasks_G[idx].Period > 0) {
                    SCH_tasks_G[idx].Delay = SCH_tasks_G[idx].Period; // Đặt lại thời gian trễ
                }
            } else {
                SCH_tasks_G[idx].Delay--; // Giảm thời gian trễ
            }
        }
    }
}

unsigned char SCH_Add_Task(void (*pFunction)(), unsigned int Delay, unsigned int Period) {
    unsigned char idx = 0;

    // Vòng lặp tìm kiếm vị trí trống trong mảng nhiệm vụ
    for (idx = 0; idx < SCH_MAX_TASKS; idx++) {
        if (SCH_tasks_G[idx].pTask == NULL) {
            break; // Dừng lại nếu tìm thấy vị trí trống
        }
    }

    // Kiểm tra nếu danh sách đầy
    if (idx == SCH_MAX_TASKS) {
        return SCH_MAX_TASKS; // Trả về lỗi nếu không còn vị trí
    }

    // Thêm nhiệm vụ mới vào vị trí trống
    SCH_tasks_G[idx].pTask = pFunction;
    SCH_tasks_G[idx].Delay = Delay;
    SCH_tasks_G[idx].Period = Period;
    SCH_tasks_G[idx].RunMe = 0;

    return idx; // Trả về chỉ số của nhiệm vụ được thêm
}

void SCH_Delete_Task(const int task_index) {
    // Xóa task đầu tiên trong hàng đợi
    for (uint8_t i = 0; i < SCH_MAX_TASKS - 1; i++) {
        SCH_tasks_G[i] = SCH_tasks_G[i + 1];
    }

    // Đặt lại task cuối cùng
    SCH_tasks_G[SCH_MAX_TASKS - 1].pTask = NULL;
    SCH_tasks_G[SCH_MAX_TASKS - 1].Delay = 0;
    SCH_tasks_G[SCH_MAX_TASKS - 1].Period = 0;
    SCH_tasks_G[SCH_MAX_TASKS - 1].RunMe = 0;
}

void SCH_Dispatch_Tasks(void) {
    if (SCH_tasks_G[0].RunMe > 0 && SCH_tasks_G[0].pTask != NULL) {
        // Thực thi task
        SCH_tasks_G[0].pTask();
        SCH_tasks_G[0].RunMe = 0;

        sTask CompletedTask = SCH_tasks_G[0]; // Lưu thông tin task vừa thực thi
        SCH_Delete_Task();                // Xóa task đã thực thi

        // Nếu task có chu kỳ lặp lại, thêm lại vào hàng đợi
        if (CompletedTask.Period != 0) {
            SCH_Add_Task(CompletedTask.pTask, CompletedTask.Period, CompletedTask.Period);
        }
    }
}

